// bind with ipcMain.handle
export const IPCActions = {
  APP: {
    GET_APP_PATH: 'APP:GET_APP_PATH',
    GET_WORK_SPACE: 'APP:GET_WORK_SPACE',
    GET_RECENT_WORK_SPACES: 'APP:GET_RECENT_WORK_SPACES',
    SET_WORK_SPACE: 'APP:SET_WORK_SPACE',
    PUSH: {
      WORK_SPACE_CHANGED: 'APP:PUSH:WORK_SPACE_CHANGED',
      RECENT_WORK_SPACES_CHANGED: 'APP:PUSH:RECENT_WORK_SPACES_CHANGED',
    },
  },
  SHELL: { //using shell from electron to run outside command
    OPEN_EXTERNAL_HTTP: 'SHELL:OPEN_EXTERNAL_HTTP',
  },
  NOTIFICATION: {
    SHOW_NOTIFICATION: 'NOTIFICATION:SHOW_NOTIFICATION',
  },
  DIALOG: {
    SHOW_MESSAGE_DIALOG: 'DIALOG:SHOW_MESSAGE_DIALOG',
    SHOW_SELECTION_DIR: 'DIALOG:SHOW_SELECTION_DIR',
  },
  MENU: {
    SHOW_FILE_OPERATION_MENU: 'MENU:SHOW_FILE_OPERATION_MENU',
    SHOW_TAG_OPERATION_MENU: 'MENU:SHOW_TAG_OPERATION_MENU',
  },
  DATA: {
    //internal data or caching
    //app data
    // Search bar
    SET_NEW_SEARCH_TARGET: 'DATA:SET_NEW_SEARCH_TARGET',
    GET_LAST_SEARCH_TARGET: 'DATA:GET_LAST_SEARCH_TARGET', //unused for now
    // opened files
    CHECK_IN_OPENED_FILE: 'DATA:CHECK_IN_OPENED_FILE', //check to see if a path is still in opened files
    GET_ALL_OPENED_FILES: 'DATA:GET_ALL_OPENED_FILES',
    SET_OPENED_FILES: 'DATA:SET_OPENED_FILES', //DANGER, mainly used to reset the order of items
    PUSH_ALL_OPENED_FILES: 'DATA:PUSH_ALL_OPENED_FILES', //like the previous one but push to all listening component in the renderer
    UPDATE_OPENED_FILE_CONTENT: 'FILES:UPDATE_OPENED_FILE_CONTENT', //render to main
    CLOSE_TARGET_OPENED_FILES: 'DATA:CLOSE_OPENED_FILES',
    CLOSE_ALL_OPENED_FILES: 'DATA:CLOSE_ALL_OPENED_FILES',
    // Tags
    SET_TAG_AS_EDITING: 'DATA:SET_TAG_AS_EDITING',
    GET_EDITING_TAG: 'DATA:GET_EDITING_TAG',
    // selection status
    GET_SELECTION_STATUS_CACHE: 'DATA:GET_SELECTION_STATUS_CACHE',
    UPDATE_SELECTION_STATUS_CACHE: 'DATA:UPDATE_SELECTION_STATUS_CACHE',
    // active file
    CHANGE_ACTIVE_FILE: 'DATA:CHANGE_ACTIVE_FILE',
    GET_ACTIVE_FILE: 'DATA:GET_ACTIVE_FILE',
    SET_ACTIVE_FILE_CONTENT: 'DATA:SET_ACTIVE_FILE_CONTENT', // after editor is loaded with a file, cache it's HTML string content for searching
    GET_ACTIVE_FILE_CONTENT: 'DATA:GET_ACTIVE_FILE_CONTENT', // after editor is loaded with a file, cache it's HTML string content for searching
    // saving
    SAVE_ACTIVE_FILE: 'DATA:SAVE_ACTIVE_FILE',
    SAVE_ALL_OPENED_FILES: 'DATA:SAVE_ALL_OPENED_FILES',
    SAVE_TARGET_OPENED_FILE: 'DATA:SAVE_TARGET_FILE',
    // Deleting - currently no IPC interface, only context memu
    PUSH: {
      ACTIVE_FILE_CHANGED: 'DATA:PUSH:ACTIVE_FILE_CHANGED', //push the current active file
      ACTIVE_FILE_CONTENT_CHANGED: 'DATA:PUSH:ACTIVE_FILE_CONTENT_CHANGED', //push the current active file
      OPENED_FILE_CONTENT_CHANGED: 'DATA:PUSH:OPENED_FILE_CONTENT_CHANGED', //push payload in TChangedFilesPayload
      OPENED_FILES_CHANGED: 'DATA:PUSH:OPENED_FILES_CHANGED', // main to rendered, pushes all opened files in TFileInMemory
      BEGIN_NEW_SEARCH: 'DATA:PUSH:FOCUS_SEARCH_BAR', // push the target type for search bar
      TAG_CONTENT_CHANGED: 'DATA:TAG_CONTENT_CHANGED', //push the changed tag as TTagsInMemory
      EDITING_TAG_CHANGED: 'DATA:EDITING_TAG_CHANGED', //push TTagsInMemory or null
    },
  },
  EDITOR_MD: {
    // markdown file editor
    SET_JUMP_TO_LINE: 'EDITOR:SET_JUMP_TO_SEARCH_RESULT',
    SET_CONTENT_SEARCH_RESULT: 'EDITOR:SET_CONTENT_SEARCH_RESULT',
    INSERT_FILE_LINK: 'EDITOR:INSERT_FILE_LINK',
    PUSH: {
      TEXT_INSERT_REQUEST: 'EDITOR:PUSH:TEXT_INSERT_REQUEST',
      NEW_CONTENT_SEARCH_RESULT: 'EDITOR:NEW_CONTENT_SEARCH_RESULT',
      NEW_JUMP_TO_LINE_TARGET: 'EDITOR:NEW_JUMP_TO_SEARCH_RESULT_TARGET',
    },
  },
  FILES: {
    //Generic FS
    LIST_CURRENT_PATH: 'FILES:LIST_CURRENT_PATH',
    LIST_CURRENT_PATH_MD: 'FILES:LIST_CURRENT_PATH_MD',
    // tags
    LIST_ALL_TAGS: 'FILES:LIST_ALL_TAGS',
    CREATE_NEW_TAG: 'FILES:CREATE_NEW_TAG',
    UPDATE_TARGET_TAG_CONTENT: 'FILES:UPDATE_TARGET_TAG_CONTENT',
    SYNC_TO_TAG: 'FILES:SYNC_TO_TAGS',
    REMOVE_FROM_TAG: 'FILES:REMOVE_FROM_TAG', //when a tag link is deleted from file, remove the reference from tag
    VALIDATE_TAG_IN_LINKED_FILES: 'FILES:VALIDATE_TAG_IN_LINKED_FILES', //check if a link to a tag still exists in the file
    // Files
    CREATE_NEW_FILE: 'FILES:CREATE_NEW_FILE',
    READ_MD_FROM_PATH: 'FILES:READ_MD_FROM_PATH',
    // renaming
    CHANGE_TARGET_FILE_NAME: 'FILE:CHANGE_TARGET_FILE_NAME', //generic interface that will be used by renderer
    CHANGE_TARGET_TAG_NAME: 'FILE:CHANGE_TARGET_TAG_NAME',
    // saving
    CHANGE_TARGET_FILE_CONTENT: 'FILE:CHANGE_TARGET_FILE_CONTENT',
    PUSH: {
      RENAMING_TARGET_FILE: 'FILE:RENAMING_TARGET_FILE', //send to renderer along with target file info
      RENAMING_SELECTED_TAG: 'MENU:PUSH:RENAMING_SELECTED_TAG', //push rename target's Path
    },
    // signals don't send a payload
    SIGNAL: {
      MD_LIST_CHANGED: 'FILES:SIGNAL:MD_LIST_CHANGED',
      TAG_LIST_CHANGED: 'FILES:SIGNAL:TAG_LIST_CHANGED',
    },
  },
  CONVERSION: {
    //
    CONVERT_TAG_RAW_FROM_NAME: 'CONVERSION:CONVERT_TAG_RAW_FROM_NAME',
  },
};
